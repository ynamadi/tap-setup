#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:json", "json")
---
apiVersion: scanning.apps.tanzu.vmware.com/v1beta1
kind: ScanPolicy
metadata:
  name: scan-policy
  namespace: #@ data.values.tap.devNamespace
  annotations:
    kapp.k14s.io/change-rule.0: "upsert after upserting scancontroller"
    kapp.k14s.io/change-rule.1: "upsert after upserting tanzu-app-platform"
    kapp.k14s.io/change-rule.2: "upsert after upserting tanzu-app-platform-configs"
    kapp.k14s.io/change-rule.3: "delete after deleting tanzu-app-platform"
  labels:
    'app.kubernetes.io/part-of': 'component-a'
spec:
  regoFile: |
    package main

    notAllowedSeverities := ["Critical", "High", "UnknownSeverity", "Negligible"]
    ignoreCves := ["CVE-2016-1000027", "GHSA-6v73-fgf6-w5j7", "GHSA-36p3-wjmg-h94x", "CVE-2015-0244", "CVE-2015-3166", "CVE-2018-1115", "CVE-2019-10211", "CVE-2015-0241", "CVE-2015-0242", "CVE-2015-0243", "CVE-2015-3167", "CVE-2016-0766", "CVE-2016-0768", "CVE-2016-0773", "CVE-2016-5423", "CVE-2016-5424", "CVE-2016-7048", "CVE-2017-14798", "CVE-2017-7484", "CVE-2019-10127", "CVE-2019-10128", "CVE-2019-10210", "CVE-2020-25694", "CVE-2020-25695", "CVE-2021-23214", "GHSA-88cc-g835-76rp", "GHSA-r38f-c4h4-hqq2", "CVE-2021-26291", "GHSA-36p3-wjmg-h94x", "GHSA-h86w-m5rm-xr33"]

    contains(array, elem) = true {
      array[_] = elem
    } else = false { true }

    isSafe(match) {
      severities := { e | e := match.ratings.rating.severity } | { e | e := match.ratings.rating[_].severity }
      some i
      fails := contains(notAllowedSeverities, severities[i])
      not fails
    }

    isSafe(match) {
      ignore := contains(ignoreCves, match.id)
      ignore
    }

    deny[msg] {
      comps := { e | e := input.bom.components.component } | { e | e := input.bom.components.component[_] }
      some i
      comp := comps[i]
      vulns := { e | e := comp.vulnerabilities.vulnerability } | { e | e := comp.vulnerabilities.vulnerability[_] }
      some j
      vuln := vulns[j]
      ratings := { e | e := vuln.ratings.rating.severity } | { e | e := vuln.ratings.rating[_].severity }
      not isSafe(vuln)
      msg = sprintf("CVE %s %s %s", [comp.name, vuln.id, ratings])
    }

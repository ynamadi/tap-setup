#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")

---
#@ def config():
profile: full

tap_telemetry:
   installed_for_vmware_internal_use: "true"

contour:
  envoy:
    service:
      type: LoadBalancer

shared:
  #! ca_cert_data: #@ data.values.tap.credentials.ca_cert
  ingress_domain: #@ data.values.tap.domains.main
  ingress_issuer: ""
  kubernetes_version: #@ data.values.tap.kubernetesVersion

ceip_policy_disclosed: true
buildservice:
  ca_cert_data: #@ data.values.tap.credentials.registry.ca_cert
  kp_default_repository: #@ "{}/{}".format(data.values.tap.registry.host, data.values.tap.registry.repositories.buildService)
  kp_default_repository_username: #@ data.values.tap.credentials.registry.username
  kp_default_repository_password: #@ data.values.tap.credentials.registry.password
  exclude_dependencies: true

supply_chain: basic

ootb_supply_chain_basic:
  registry:
    server: #@ data.values.tap.registry.host
    repository: #@ data.values.tap.registry.repositories.ootbSupplyChain
  git_implementation: libgit2
  gitops:
    ssh_secret: git-ssh


 #! supply_chain: testing_scanning

#! ootb_supply_chain_testing_scanning:
  #! registry:
    #! server: #@ data.values.tap.registry.host
    #! repository: #@ data.values.tap.registry.repositories.ootbSupplyChain
  #! git_implementation: libgit2
  #! gitops:
    #! ssh_secret: git-ssh
  #! scanning:
    #! image:
      #! template: private-image-scan-template
      #! policy: scan-policy
     #! source:
      #! template: blob-source-scan-template
      #! policy: scan-policy

learningcenter:
  ingressDomain: #@ data.values.tap.domains.learningCenter
  ingressSecret:
    secretName: tls

tap_gui:
  tls:
    namespace: tap-gui
    secretName: tap-gui-cert
  metadataStoreAutoconfiguration: true
  service_type: ClusterIP
  app_config:
    #!organization:
      #!name: #@ data.values.tap.credentials.customize.org_name
    #!customize:
      #!custom_logo: #@ data.values.tap.credentials.customize.custom_logo
      #!custom_name: #@ data.values.tap.credentials.customize.custom_name
    app:
      baseUrl: #@ "https://{}".format(data.values.tap.domains.tapGui)
    integrations:
      #@ if "github" in data.values.tap.credentials and "token" in data.values.tap.credentials.github:
      github:
      - host: github.com
        token: #@ data.values.tap.credentials.github.token
      #@ end
    catalog:
      locations: #@ data.values.tap.credentials.catalogs

    supplyChain:
      enablePlugin: true
    backend:
      baseUrl: #@ "https://{}".format(data.values.tap.domains.tapGui)
      cors:
        origin: #@ "https://{}".format(data.values.tap.domains.tapGui)
      #@ if "backstage" in data.values.tap.credentials and "database" in data.values.tap.credentials.backstage:
      backend:
        database:
          client: #@ data.values.tap.credentials.backstage.database.client
          connection:
            host: #@ data.values.tap.credentials.backstage.database.host
            port: #@ data.values.tap.credentials.backstage.database.port
            user: #@ data.values.tap.credentials.backstage.database.username
            password: #@ data.values.tap.credentials.backstage.database.password
            ssl: {rejectUnauthorized: true}
      #@ end
    #@ if "github" in data.values.tap.credentials and "clientId" in data.values.tap.credentials.github and "clientSecret" in data.values.tap.credentials.github:
    auth:
      environment: development
      providers:
        github:
          development:
            clientId: #@ data.values.tap.credentials.github.clientId
            clientSecret: #@ data.values.tap.credentials.github.clientSecret
    #@ end
metadata_store:
  ns_for_export_app_cert: "*"

grype:
  namespace: #@ data.values.tap.devNamespace
  targetImagePullSecret: "registry-credentials"

scanning:
  certIssuer: "tap-ingress-selfsigned"
  metadataStore:
    url: ""
    ns_for_export_app_cert: "*"

cnrs:
  domain_name: #@ data.values.tap.domains.knative
  default_tls_secret: tanzu-system-ingress/tls
  domain_template: "{{.Name}}-{{.Namespace}}.{{.Domain}}"

appliveview:
  ingressDomain: #@ data.values.tap.domains.main
  ingressEnabled: false
  tls:
    namespace: tanzu-system-ingress
    secretName: tls

package_overlays:
- name: tap-gui
  secrets:
  - name: k8s-reader-overlay
#@ end
---
apiVersion: v1
kind: Secret
metadata:
  name: tap-values
  namespace: #@ data.values.tap.namespace
  annotations:
    kapp.k14s.io/change-rule.0: "delete after deleting tanzu-app-platform"
type: Opaque
stringData:
  values.yml: #@ yaml.encode(config())
---
apiVersion: packaging.carvel.dev/v1alpha1
kind: PackageInstall
metadata:
  name: tap
  namespace: #@ data.values.tap.namespace
  annotations:
    kapp.k14s.io/create-strategy: fallback-on-update
    kapp.k14s.io/change-group: "tap-package-install"
    kapp.k14s.io/change-rule: "upsert after upserting rbac"
    kapp.k14s.io/change-rule.0: "upsert after upserting tanzu-app-platform"
    kapp.k14s.io/change-rule.1: "delete after deleting tanzu-app-platform"
    kapp.k14s.io/change-rule.repo: "upsert after upserting tap-repo"
    ext.packaging.carvel.dev/ytt-paths-from-secret-name.0: "custom-labels"
spec:
  packageRef:
    refName: tap.tanzu.vmware.com
    versionSelection:
      constraints: #@ str(data.values.tap.version)
      prereleases: {}
  serviceAccountName: tap-default-sa
  values:
  - secretRef:
      name: tap-values
---
apiVersion: v1
kind: Secret
metadata:
  name: custom-labels
  namespace: #@ data.values.tap.namespace
  annotations:
    kapp.k14s.io/change-rule.install-ns: "upsert after upserting tap-install-gitops-namespace"
    kapp.k14s.io/change-rule.0: "delete after deleting tanzu-app-platform"
stringData:
  add-custom-labels.yml: |
    #@ load("@ytt:overlay", "overlay")

    #@overlay/match by=overlay.subset({"kind":"PackageInstall"}),expects="1+"
    ---
    metadata:
      #@overlay/match missing_ok=True
      annotations:
        #@overlay/match missing_ok=True
        ext.packaging.carvel.dev/ytt-paths-from-secret-name.0: my-custom-labels

---
apiVersion: v1
kind: Secret
metadata:
  name: my-custom-labels
  namespace: #@ data.values.tap.namespace
  annotations:
    kapp.k14s.io/change-rule.install-ns: "upsert after upserting tap-install-gitops-namespace"
    kapp.k14s.io/change-rule.0: "delete after deleting tanzu-app-platform"
stringData:
  add-my-custom-labels.yml: |
    #@ load("@ytt:overlay", "overlay")

    #@overlay/match by=overlay.subset({"kind": "Namespace"}),expects="0+"
    ---
    metadata:
      #@overlay/match missing_ok=True
      labels:
        #@overlay/match missing_ok=True
        istio-injection: "false"
        #@overlay/match missing_ok=True
        tmc-policy: "false"

---
apiVersion: v1
kind: Secret
metadata:
  name: deactivate-tls-overlay
  namespace: #@ data.values.tap.namespace
stringData:
  deactivate-tls-overlay.yml: |
    #@ load("@ytt:overlay", "overlay")
    #@overlay/match by=overlay.subset({"kind":"Deployment", "metadata": {"name": "server", "namespace": "tap-gui"}}),expects="1+"
    ---
    spec:
      template:
        spec:
          containers:
            #@overlay/match by=overlay.all,expects="1+"
            #@overlay/match-child-defaults missing_ok=True
            - env:
              - name: NODE_TLS_REJECT_UNAUTHORIZED
                value: "0"